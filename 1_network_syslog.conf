input {
   udp {
       port => 4514
       type => "network_device"
       add_field => {
           "source" => "netdev"
       }   
   }
   udp {
       port => 514
       type => "security_device"
       add_field => {
           "source" => "secdev"
       }
   }
}

filter {
   if "TP_660N" in [message] or "S_CDC_NDS_DMZ_IPS330_1" in [message] {
       grok {
           match => { "message" => "^<%{POSINT:syslog_pri}>%{GREEDYDATA:csv_message}" }
	   add_field => {"appName" => "tpips" }
       }
   }
#*********************pre-treated netscreen FW***************************
    else if "F_SY_CORE_J140-01" in [message] or "F_ZZ_CORE_J140-01" in [message] or "F_ZZ_CORE_J140-02" in [message]{
	grok {
            patterns_dir => ["/etc/logstash/patterns"]
	    match => { "message" => "^<%{POSINT:syslog_pri}>%{NETSCREENSYSLOG:netscreen_pri} %{GREEDYDATA:message}"}
            overwrite => ["message"]  
            add_field => {"appName" => "netscreenfw"}
        } 
   }
#*******************pre-treated netscreen sys_log************************
   else if "BEA_CNDC_INTERNET_J350" in [message]{
	grok {
	    match => { "message" => "^<%{POSINT:syslog_pri}>%{GREEDYDATA:message}"}
	    overwrite => ["message"]
	    add_field => {"appName" => "netscreen"}
        }
   
   }
#******************pre-processed S-ZZ-zhengzhou **********************************************
   else if "S-ZZ" in [message] {
        grok {
            patterns_dir => ["/etc/logstash/patterns"]
            match => { "message" => 
                                   ["^<%{POSINT:syslog_pri}>%{SZZTIMEPRE:szz_time} %{GREEDYDATA:message}",
                                    "^<%{POSINT:syslog_pri}>%{SZZTIMEPRE_2:szz_time} %{GREEDYDATA:message}" 
                                   ]}
            overwrite => ["message"]
            add_field => {"appName" => "szzoa"}
        }
   }
#*****************pre-processed waf********************************************************
   else if "waf_log_websec" in [message] {
        grok {
           patterns_dir => ["/etc/logstash/patterns"]
           match => { "message" => "^<%{POSINT:syslog_pri}>%{WAFTIME:time} localhost waf: %{GREEDYDATA:message}"}
           overwrite => ["message"]
           add_field => {"appName" => "wafsec"}
        }    
 
   }
#***********************pre-processed waf-stat***************************************************************  
   else if "waf_log_wafstat" in [message] {
        grok {
           patterns_dir => ["/etc/logstash/patterns"]
           match => { "message" => "^<%{POSINT:syslog_pri}>%{WAFTIME:time} localhost waf: %{GREEDYDATA:message}"}
           overwrite => ["message"]
           add_field => {"appName" => "wafstat"}
        }    
   }
#*************************pre-processed ADS****************************************************************
   else if "SYN-Flood" in [message] or "Stream-Flood" in [message] or "UDP-Flood" in [message]{
        grok {
           patterns_dir => ["/etc/logstash/patterns"]
           match => { "message" => "^<%{POSINT:syslog_pri}> %{ADS_PRE} %{GREEDYDATA:message}"}
           overwrite => ["message"]
           add_field => {"appName" => "adssec"}
        }
  
   }
#***********************************Collapsar ***************************************************************
    else if "Collapsar" in [message] {
        grok {
           match => { "message" => "^<%{POSINT:syslog_pri}> %{GREEDYDATA:message}"}
           overwrite => ["message"]
           add_field => {"appName" => "collapsar"}
        }
        #mutate {
         #   gsub => ["message", "\n", ""]
       # }
    }    
#***************************portinfo pre-processed***********************************
   else if "Portinfo" in [message] {
        grok {
           match => { "message" => "^<%{POSINT:syslog_pri}>  %{GREEDYDATA:message}"}
           overwrite => ["message"]
           add_field => {"appName" => "portinfo"}
        }  
   }   
#*****************pre-treated cisco ************************************************** 
   else if [source] == "secdev" {
       grok {
           patterns_dir => ["/etc/logstash/patterns"]
           match => {"message" => 
              [
                 "%{CISCO_TAGGED_SYSLOG} %{GREEDYDATA:message}",
		 "%{NEWCISCO_TAGGED_SYSLOG} %{GREEDYDATA:message}"
              ]
           }
           overwrite => ["message"]
       }
   }
}
filter {
   if [syslog_pri] {
       syslog_pri {}
   }
   if [appName] == "tpips" {
       csv {
            source => "csv_message"
            separator => "	"
            columns => ["sev", "log_type", "policy_uuid", "action_uuid", "sig_name", "policy_id", "protocol_name", "src_ip", "src_port", "dst_ip", "dst_port", "event_num", "param_1", "param_2", "param_3", "packet_num", "device_name", "device_segment", "timestamp", "param_4", "param_5"]
            convert => {
              "src_port" => "integer"
              "dst_port" => "integer"
            }
          }
   }
   if [source] == "secdev" and [ciscotag] {
       grok {
           patterns_dir => ["/etc/logstash/patterns"]
           match => {
               "message" => [
                   "%{NEWCISCOFW106023}",
                   "%{CISCOFW106015}",
                   "%{CISCOFW106014}",
                   "%{NEWCISCOFW106017}",
		   "%{CISCOFW106001}",
		   "%{NEWCISCOFW713120}",
		   "%{CISCOFW106100}",
	 	   "%{CISCOFW302020_302021}",
		   "%{CISCOFW302013_302014_302015_302016}",
		   "%{CISCOFW733100}",
		   "%{TCISCOFW313005}",
		   "%{CISCOFW106006_106007_106010}",
		   "%{CISCOFW302010}",
		   "%{NEWCISCOFW111007}"	 		 
               ]
	   }
	   add_field => {"appName" => "ciscofw"}
       }
   }
   if [appName] == "netscreen" {
       grok {
          patterns_dir => ["/etc/logstash/patterns"]
          match => { "message" => ["%{NETSCREEN_SYSLOG_1}", "%{NETSCREEN_SYSLOG_2}"]}
          
       }

   }
#*******************SZZ-zhengzhou device***************************************************************************************
   if [appName] == "szzoa" {
        grok {
           patterns_dir => ["/etc/logstash/patterns"]
           match => { "message" => ["%{SZZ_SERIES_2}"]}
        }
   }
#*********************waf-sec**********************************************************************************************
   if [appName] == "wafsec" {
       grok {
          patterns_dir => ["/etc/logstash/patterns"]
          match => { "message" => ["%{WAF_SEC_1}"]}
       }

   }
#***********************waf-stat******************************************************************************************   
   if [appName] == "wafstat" {
       grok {
          patterns_dir => ["/etc/logstash/patterns"]
          match => { "message" => ["%{WAF_SEC_2}"]}
       }

   }
#**********************ads-sec********************************************************************************************
   if [appName] == "adssec" {
      kv { include_keys => ["src", "dst", "sport", "dport", "flag"] }
      mutate {
         rename => ["src", "src_ip"]
         rename => ["dst", "dst_ip"]
         rename => ["sport", "src_port"]
         rename => ["dport", "dst_port"]
         gsub => ["flag", "\n", ""]
      }
         
   }
#***************************collapsar*************************************************************************************
   if [appName] == "collapsar" {
      grok { 
        patterns_dir => ["/etc/logstash/patterns"]
        match => { "message" => "%{COLLAPSAR}" }
      }
   }
#******************************portinfo**************************************************************************
   if [appName] == "portinfo" {
      grok { 
        patterns_dir => ["/etc/logstash/patterns"]
        match => { "message" => "%{PORTINFO}" }
      }
   }
#*********************use kv plugin parse netscreen_J140-01 and add field protocol if there is icmp field*****************************
   if [appName] == "netscreenfw"{

     	kv {
	   include_keys => ["start_time", "duration", "policy_id", "service", "proto", "zone", "action", "sent", "rcvd", "src", "dst", "icmp", "src_port", "dst_port", "ip", "port", "session_id", "reason", "type", "code"]
        }
        mutate {
           copy => {"zone[0]" => "src_zone"}
           copy => {"zone[1]" => "dst_zone"} 
           copy => {"ip[0]" => "src_xlated_ip"} 
           copy => {"ip[1]" => "dst_xlated_ip"} 
           copy => {"port[0]" => "src_xlated_port"}
           copy => {"port[1]" => "dst_xlated_port"} 
           remove_field => ["zone"]
           remove_field => ["ip"]
           remove_field => ["port"]           
           rename => ["src", "src_ip"]
           rename => ["dst", "dst_ip"]           
	}
        if [service] == "icmp" {
              mutate {
                   add_field => { "protocol" => "icmp" }
              }
        }

   }
   if [timestamp] {
      date{
          match => ["timestamp", "MMM dd yyyy HH:mm:ss", "ISO8601", "UNIX", "UNIX_MS"]
          target => "@timestamp"
      }
   }
   if [src_ip] {
       geoip{
           source => "src_ip"
           target => "s_geoip"
           fields => ["city_name", "country_name", "region_name", "location"]   
       }
   }
   if [dst_ip] {
       geoip{
           source => "dst_ip"
           target => "d_geoip"
           fields => ["city_name", "country_name", "region_name", "location"]   
       }
    }
}

output {
   if "_grokparsefailure" in  [tags] or [appName] == "tpips" {
       stdout {
           codec => rubydebug
       }
   }
   if [type] == "network_device" or [type] == "security_device" {
       kafka {
           topic_id => "titan-syslog-topic-1"
           bootstrap_servers => "172.22.1.12:9092,172.22.1.12:9093,172.22.1.13:9092"
           message_key => "%{source}|%{appName}|all|month|%{@timestamp}"
           codec => "json"
       }
   }
}
